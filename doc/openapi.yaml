openapi: 3.1.0
info:
  title: Rock-Paper-Scissors
  version: 1.0.0
  description: An implementation of Rock-Paper-Scissors
  contact:
    name: Rob Allen
  license:
    name: The MIT License
    identifier: MIT
servers:
  - url: 'http://rps.example'
paths:
  /:
    get:
      summary: Root
      description: Entry point to the API, Lists endpoints of interest.
      operationId: root

      responses:
        '200':
          $ref: '#/components/responses/RootResponse'
  /games:
    get:
      summary: List all games
      description: Create a new game of Rock-Paper-Scissors
      operationId: listGames

      responses:
        '200':
          $ref: '#/components/responses/ListGamesResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/MethodNotAllowedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new game
      description: Create a new game of Rock-Paper-Scissors
      operationId: createGame

      requestBody:
        description: Game to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameRequest'
      responses:
        '201':
          $ref: '#/components/responses/NewGameResponse'
        '400':
          $ref: '#/components/responses/NewGameError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/MethodNotAllowedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /games/{game_id}:
    parameters:
      - $ref: '#/components/parameters/GameId'
    get:
      summary: View a single game
      description: Retrieve a game of Rock-Paper-Scissors
      operationId: getGame
      responses:
        '200':
          $ref: '#/components/responses/GameResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/MethodNotAllowedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/games/{game_id}/moves':
    parameters:
      - $ref: '#/components/parameters/GameId'
    post:
      summary: Make a move
      description: |
        This needs to happen twice: once for each player. Once both moves are played, the game is over.
      operationId: makeMove

      requestBody:
        description: Move to make
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeMoveRequest'
            example:
              player: Rob Allen
              move: rock
      responses:
        '200':
          description: |
            Move accepted.

            On a successful move, either the other player's move will be required in which case another call the Make Move is required or if this is the second player's move, then you may call the Judge endpoint to find out who won.
            The next call to make is provided in the `_links` property of the returned payload.
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/MakeMoveResponse'
        '400':
          description: Unable to play that move
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/MakeMoveError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/MethodNotAllowedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    GameId:
      name: game_id
      in: path
      required: true
      description: Game Id
      schema:
        $ref: '#/components/schemas/GameId'
  schemas:
    GameId:
      type: string
      example: 2BC08389-885A-4322-80D0-EF0DE2D7CD37
      format: uuid
    Player:
      type: string
      example: Rob
    Player2:
      type: string
      example: Sadie
    Status:
      type: string
      enum:
        - Game not started
        - Game in progress
        - Game complete
    Result:
      type: string
      example: "Rob wins. Rock beats Scissors."
    Move:
      type: string
      enum:
        - rock
        - paper
        - scissors
    NewGameLink:
        type: object
        properties:
          href:
            type: string
            example: http://rps.example/games
          description:
            type: string
            example: Start a new game
    GamesLink:
        type: object
        properties:
          href:
            type: string
            example: http://rps.example/games/
          description:
            type: string
            example: All games
    GameLink:
        type: object
        properties:
          href:
            type: string
            example: http://rps.example/games/2BC08389-885A-4322-80D0-EF0DE2D7CD37
          description:
            type: string
            example: This game
    NewGameRequest:
      example:
        player1: Lucy
        player2: Dave
      properties:
        player1:
          $ref: '#/components/schemas/Player'
        player2:
          $ref: '#/components/schemas/Player'
      required:
        - player1
        - player2
    MakeMoveRequest:
      properties:
        player:
          $ref: '#/components/schemas/Player'
        move:
          $ref: '#/components/schemas/Move'
      required:
        - player
        - move
    MakeMoveResponse:
      description: Either a link to make a next move or a link to get the results is provided.
      oneOf:
        - $ref: '#/components/schemas/NextMoveBody'
        - $ref: '#/components/schemas/ResultBody'
    NextMoveBody:
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/GameLink'
            makeNextMove:
              type: object
              properties:
                href:
                  type: string
                  description: URL for player move
                  example: http://rps.example/games/2BC08389-885A-4322-80D0-EF0DE2D7CD37/moves
                description:
                  type: string
                  description: Information about this link
                  example: Make other player's move
    ResultBody:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Result'
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/GameLink'
            newGame:
              $ref: '#/components/schemas/NewGameLink'
    MakeMoveError:
      type: object
      properties:
        player:
          type: string
          description: Player is invalid
        move:
          type: string
          description: Move is invalid
  responses:
    NotFoundError:
      description: A Not Found error occurred
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Information about error
                example: Game not found
              type:
                type: string
                description: Link to IETF information about this error
                example: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
    MethodNotAllowedError:
      description: A Method Not Allowed error occurred
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Information about error
                example: Method not found
              type:
                type: string
                description: Link to IETF information about this error
                example: 'https://tools.ietf.org/html/rfc7231#section-6.5.5'
    InternalServerError:
      description: An internal server error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Information about error
                example: Internal Server Error
        application/problem+json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Information about error
                example: Game not found
              type:
                type: string
                description: Link to IETF information about this error
                example: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
    RootResponse:
      description: The list of interesting endpoints
      content:
        application/hal+json:
          schema:
            type: object
            properties:
              _links:
                type: object
                properties:
                  games:
                    $ref: '#/components/schemas/GamesLink'
    ListGamesResponse:
      description: The list of games
      content:
        application/hal+json:
          schema:
            type: object
            properties:
              count:
                type: integer
              _links:
                type: object
                properties:
                  self:
                    $ref: '#/components/schemas/GamesLink'
              _embedded:
                type: object
                properties:
                  game:
                    type: array
                    items:
                      type: object
                      properties:
                        player1:
                          $ref: '#/components/schemas/Player'
                        player2:
                          $ref: '#/components/schemas/Player2'
                        status:
                          $ref: '#/components/schemas/Status'
                        _links:
                          type: object
                          properties:
                            self:
                              $ref: '#/components/schemas/GameLink'

    GameResponse:
      description: A single game
      content:
        application/hal+json:
          schema:
            type: object
            properties:
              player1:
                $ref: '#/components/schemas/Player'
              player2:
                $ref: '#/components/schemas/Player2'
              status:
                $ref: '#/components/schemas/Status'
              result:
                $ref: '#/components/schemas/Result'
              winner:
                $ref: '#/components/schemas/Player'
              _links:
                type: object
                properties:
                  self:
                    $ref: '#/components/schemas/GameLink'
                  newGame:
                    $ref: '#/components/schemas/NewGameLink'
    NewGameResponse:
      description: |
        The game was successfully created.

        The link required to play the game by making the first move is provided in the `_links` property of the returned payload.
      content:
        application/hal+json:
          schema:
            type: object
            properties:
              _links:
                type: object
                properties:
                  self:
                    $ref: '#/components/schemas/GameLink'
                  makeNextMove:
                    type: object
                    properties:
                      href:
                        type: string
                        description: URL for player move
                        example: http://rps.example/games/2BC08389-885A-4322-80D0-EF0DE2D7CD37/moves
                      description:
                        type: string
                        description: Information about this link
                        example: Make a player's move
    NewGameError:
      description: Unable to create game due to a problem with the provided information
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Information on why the new game cannot be created
                example: Must provide both player1 and player2
